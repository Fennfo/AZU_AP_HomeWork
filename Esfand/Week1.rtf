{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}{\f2\fnil\fcharset178 Calibri;}}
{\colortbl ;\red255\green0\blue0;\red0\green77\blue187;}
{\*\generator Riched20 10.0.16299}\viewkind4\uc1 
\pard\ltrpar\sa200\sl276\slmult1\f0\fs40\lang9 Fundamentals of Python programing:\par
chapter 4, section 14 (Exercises):\fs36\par
\par
\cf1 1. \cf0 What possible values can a Boolean expression have?\par
\cf2\i\fs32 =>True and False.\par
\cf0\i0\fs36\par
\cf1 2. \cf0 Where does the term Boolean originate?\par
\cf2\i\fs32 =>It comes from t he name of the british mathematician George Boole.\par
\cf0\i0\fs36\par
\cf1 3. \cf0 What is an integer equivalent to True in Python?\par
\cf2\i\fs32 =>any positive or negative integer is True, only 0 is False.\par
\par
\cf1\i0\fs36 4. \cf0 What is the integer equivalent to False in Python?\par
\cf2\i\fs32 =>0.\par
\cf0\i0\fs36\par
\cf1 5. \cf0 Is the value -16 interpreted as True or False?\par
\cf2\i\fs32 =>True.\par
\cf0\i0\fs36\par
\cf1 6. \cf0 Given the following de\f1\u-1279?nitions:\par
x, y, z = 3, 5, 7\par
evaluate the following Boolean expressions:\par
(a) x == 3 \f0\lang1033  \cf2\i\fs32 =>True.\cf0\i0\f1\fs36\lang9\par
(b) x < y\f0\lang1033   \cf2\i\fs32 =>True.\cf0\i0\f1\fs36\lang9\par
(c) x >= y \f0\lang1033  \cf2\i\fs32 =>False.\cf0\i0\f1\fs36\lang9\par
(d) x <= y \f0\lang1033  \cf2\i\fs32 =>True.\cf0\i0\f1\fs36\lang9\par
(e) x != y - 2 \f0\lang1033  \cf2\i\fs32 =>False.\cf0\i0\f1\fs36\lang9\par
(f) x < 10 \f0\lang1033  \cf2\i\fs32 =>True\cf0\i0\fs36 .\f1\lang9\par
(g) x >= 0 and x < 10 \f0\lang1033  \cf2\i\fs32 =>True and True = True.\cf0\i0\f1\fs36\lang9\par
(h) x < 0 and x < 10 \f0\lang1033  \cf2\i\fs32 =>False and True = False.\cf0\i0\f1\fs36\lang9\par
(i) x >= 0 and x < 2  \cf2\i\f0\fs32\lang1033 =>True and False = False.\cf0\i0\f1\fs36\lang9\par
(j) x < 0 or x < 10 \f0\lang1033  \cf2\i\fs32 =>False or True = True.\cf0\i0\f1\fs36\lang9\par
(k) x > 0 or x < 10 \f0\lang1033  \cf2\i\fs32 =>True or True = True.\cf0\i0\f1\fs36\lang9\par
(l) x < 0 or x > 10 \f0\lang1033  \cf2\i\fs32 =>False or False = False.\cf0\i0\f1\fs36\lang9\par
\par
\cf1 7. \cf0 Given the following de\u-1279?nitions: \par
x, y = 3, 5 \par
b1, b2, b3, b4 = True, False, x == 3, y < 3\par
\cf2\i\f0\fs32\lang1033 =>b1==True.\par
b2==False.\par
b3==True.\par
b4==False.\f1\lang9\par
\cf0\i0\fs36 evaluate the following Boolean expressions:\par
(a) b3 \cf2\i\f0\fs32\lang1033 =>True.\f1\lang9\par
\cf0\i0\fs36 (b) b4 \cf2\i\f0\fs32\lang1033 =>Flase.\f1\lang9\par
\cf0\i0\fs36 (c) not b1 \cf2\i\f0\fs32\lang1033 =>Flase.\f1\lang9\par
\cf0\i0\fs36 (d) not b2\f2\rtlch\lang1065  \cf2\i\f0\ltrch\fs32\lang1033 =>True.\f1\lang9\par
\cf0\i0\fs36 (e) not b3 \cf2\i\f0\fs32\lang1033 =>Flase.\f1\lang9\par
\cf0\i0\fs36 (f) not b4 \cf2\i\f0\fs32\lang1033 =>True.\f1\lang9\par
\cf0\i0\fs36 (g) b1 and b2 \cf2\i\f0\fs32\lang1033 =>True and False = False.\f1\lang9\par
\cf0\i0\fs36 (h) b1 or b2 \cf2\i\f0\fs32\lang1033 =>True or False = True.\f1\lang9\par
\cf0\i0\fs36 (i) b1 and b3 \cf2\i\f0\fs32\lang1033 =>True and True = True.\f1\lang9\par
\cf0\i0\fs36 (j) b1 or b3 \cf2\i\f0\fs32\lang1033 =>True or True = True.\f1\lang9\par
\cf0\i0\fs36 (k) b1 and b4 \cf2\i\f0\fs32\lang1033 =>True and False = False.\f1\lang9\par
\cf0\i0\fs36 (l) b1 or b4 \cf2\i\f0\fs32\lang1033 =>True or False = True.\f1\lang9\par
\cf0\i0\fs36 (m) b2 and b3 \cf2\i\f0\fs32\lang1033 =>Flase and True = False.\f1\lang9\par
\cf0\i0\fs36 (n) b2 or b3 \cf2\i\f0\fs32\lang1033 =>False or True = True.\f1\lang9\par
\cf0\i0\fs36 (o) b1 and b2 or b3 \cf2\i\f0\fs32\lang1033 =>True and False or True = True.\cf0\i0\f1\fs36\lang9\par
(p) b1 or b2 and b3 \cf2\i\f0\fs32\lang1033 =>True or False and True = True.\f1\lang9\par
\cf0\i0\fs36 (q) b1 and b2 and b3 \cf2\i\f0\fs32\lang1033 =>True and False and True = False.\f1\lang9\par
\cf0\i0\fs36 (r) b1 or b2 or b3 \cf2\i\f0\fs32\lang1033 =>True or False or True = True.\f1\lang9\par
\cf0\i0\fs36 (s) not b1 and b2 and b3\f0\lang1033\par
\cf2\i\fs32 =>False and False and True = False.\cf0\i0\f1\fs36\lang9\par
(t) not b1 or b2 or b3 \par
\cf2\i\f0\fs32\lang1033 =>False or True or True = True.\f1\lang9\par
\cf0\i0\fs36 (u) not (b1 and b2 and b3) \par
\cf2\i\f0\fs32\lang1033 =>not(True and False and True) = True.\f1\lang9\par
\cf0\i0\fs36 (v) not (b1 or b2 or b3)\par
\cf2\i\f0\fs32\lang1033 =>not(True or False or True) = False.\f1\lang9\par
\cf0\i0\fs36 (w) not b1 and not b2 and not b3 \par
\cf2\i\f0\fs32\lang1033 =>False and True and False = False.\f1\lang9\par
\cf0\i0\fs36 (x) not b1 or not b2 or not b3 \par
\cf2\i\f0\fs32\lang1033 =>False or True or False = True.\f1\lang9\par
\cf0\i0\fs36 (y) not (not b1 and not b2 and not b3) \par
\cf2\i\f0\fs32\lang1033 =>not(False and True and False) = True.\f1\lang9\par
\cf0\i0\fs36 (z) not (not b1 or not b2 or not b3)\par
\cf2\i\f0\fs32\lang1033 =>not(False or True or False) = False.\f1\lang9\par
\cf0\i0\fs36\par
\cf1 8. \cf0 Express the following Boolean expressions in simpler form; that is, use fewer operators or fewer symbols. x is an integer.\par
(a) not (x == 2) \par
\cf2\i\f0\fs32\lang1033 =>x != 2\cf0\i0\f1\fs36\lang9\par
(b) x < 2 or x == 2 \par
\cf2\i\f0\fs32\lang1033 =>x <= 2\cf0\i0\f1\fs36\lang9\par
(c) not (x < y) \par
\cf2\i\f0\fs32\lang1033 =>x >= y\cf0\i0\f1\fs36\lang9\par
(d) not (x <= y) \par
\cf2\i\f0\fs32\lang1033 =>x > y\cf0\i0\f1\fs36\lang9\par
(e) x < 10 and x > 20 \par
\cf2\i\f0\fs32\lang1033 =>False.\cf0\i0\f1\fs36\lang9\par
(f) x > 10 or x < 20 \par
\cf2\i\f0\fs32\lang1033 =>True.\cf0\i0\f1\fs36\lang9\par
(g) x != 0 \par
\cf2\i\f0\fs32\lang1033 =>True.\cf0\i0\f1\fs36\lang9\par
(h) x == 0\par
\cf2\i\f0\fs32\lang1033 =>False.\cf0\i0\f1\fs36\lang9\par
\par
\cf1 9. \cf0 Express the following Boolean expressions in an equivalent form without the not operator. x and y are integers.\par
(a) not (x == y)\par
\cf2\i\f0\fs32\lang1033 =>x != y\cf0\i0\f1\fs36\lang9\par
(b) not (x > y) \par
\cf2\i\f0\fs32\lang1033 =>x <= y\cf0\i0\f1\fs36\lang9\par
(c) not (x < y) \par
\cf2\i\f0\fs32\lang1033 =>x >= y\cf0\i0\f1\fs36\lang9\par
(d) not (x >= y) \par
\cf2\i\f0\fs32\lang1033 =>x < y\cf0\i0\f1\fs36\lang9\par
(e) not (x <= y) \par
\cf2\i\f0\fs32\lang1033 =>x > y\cf0\i0\f1\fs36\lang9\par
(f) not (x != y) \par
\cf2\i\f0\fs32\lang1033 =>x == y\cf0\i0\f1\fs36\lang9\par
(g) not (x != y) \par
\cf2\i\f0\fs32\lang1033 =>x == y\cf0\i0\f1\fs36\lang9\par
(h) not (x == y and x < 2)\par
\cf2\i\f0\fs32\lang1033 =>x != y or x >= 2\cf0\i0\f1\fs36\lang9\par
(i) not (x == y or x < 2)\par
\cf2\i\f0\fs32\lang1033 =>x != y and x >= 2\f1\lang9\par
\cf0\i0\fs36 (j) not (not (x == y))\par
\cf2\i\f0\fs32\lang1033 =>x == y\cf0\i0\f1\fs36\lang9\par
\par
\cf1 10. \cf0 What is the simplest tautology?\par
\cf2\i\f0\fs32\lang1033 =>True.\cf0\i0\f1\fs36\lang9\par
\par
\cf1 11. \cf0 What is the simplest contradiction?\par
\cf2\i\f0\fs32\lang1033 =>False.\cf0\i0\f1\fs36\lang9\par
\par
\cf1 12. \cf0 Write a Python program that requests an integer value from the user. If the value is between 1 and 100 inclusive, print \rdblquote OK;\rdblquote  otherwise, do not print anything.\par
\cf2\i\f0\fs32\lang1033 =>Note: im infering that the user wont enter a floating point number. if this was the case then we could use a try: block.\f1\lang9\par
number = None;\par
\par
while not number:\par
    number = input("Please enter a number: ");\par
number = int(number);\par
\par
if number <= 100 and number >= 1:\par
    print("Okay");\par
\cf0\i0\fs36\par
\cf1 13. \cf0 Write a Python program that requests an integer value from the user. If the value is between 1 and 100 inclusive, print \rdblquote OK;\rdblquote  otherwise, print \rdblquote Out of range.\rdblquote\par
\cf2\i\f0\fs32\lang1033 =>\f1\lang9 number = None;\par
\par
while not number:\par
    number = input("Please enter a number: ");\par
number = int(number);\par
\par
if number <= 100 and number >= 1:\par
    print("Okay");\par
else:\par
    print("Out of Range!");\cf0\i0\fs36\par
\par
\cf1 14. \cf0 Write a Python program that allows a user to type in an English day of the week (Sunday, Monday, etc.). The program should print the Spanish equivalent, if possible.\par
\cf2\i\f0\fs32\lang1033 =>Please note that im infering the question asks for elifs, because we can use match, case: as well.\par
day = None;\par
\par
while not day:\par
    day = input("Please Enter a week day: ");\par
\par
if day == "monday":\par
    print("Monday is lunes in spanish!");\par
elif day == "tuesday":\par
    print("Tuesday is martes in spanish!");\par
elif day == "wednesday":\par
    print("Wednesday is mi\'e9rcoles in spanish!");\par
elif day == "thursday":\par
    print("Thursday is jueves in spanish!");\par
elif day == "friday":\par
    print("Friday is viernes in spanish!");\par
elif day == "saturday":\par
    print("Saturday is s\'e1bado in spanish!");\par
elif day == "sunday":\par
    print("Sunday is domingo in spanish!");\par
else:\par
    print("You did not enter a week day!");\cf0\i0\f1\fs36\lang9\par
\par
\cf1 15. \cf0 Consider the following Python code fragment:\par
# i, j, and k are numbers \par
if i < j:\par
 \f0\lang1033    \f1\lang9 if j < k:\par
 \f0\lang1033         \f1\lang9 i = j \par
\f0\lang1033     \f1\lang9 else: j = k \par
else: \par
\f0\lang1033     \f1\lang9 if j > k: \par
\f0\lang1033         \f1\lang9 j = i\par
\f0\lang1033     \f1\lang9 else:\par
\f0\lang1033         \f1\lang9 i = k \par
print("i =", i, " j =", j, " k =", k)\par
What will the code print if the variables i, j, and k have the following values?\par
(a) i is 3, j is 5, and k is 7 \par
\cf2\i\f0\fs32\lang1033 =>prints:\par
i = 5 j = 5 k = 7\f1\lang9\par
\cf0\i0\fs36 (b) i is 3, j is 7, and k is 5 \par
\cf2\i\f0\fs32\lang1033 =>prints:\par
i = 3 j = 5 k = 5\f1\lang9\par
\cf0\i0\fs36 (c) i is 5, j is 3, and k is 7 \par
\cf2\i\f0\fs32\lang1033 =>prints:\par
i = 7 j = 3 k = 7\cf0\i0\f1\fs36\lang9\par
(d) i is 5, j is 7, and k is 3 \par
\cf2\i\f0\fs32\lang1033 =>prints:\par
i = 5 j = 3 k = 3\f1\lang9\par
\cf0\i0\fs36 (e) i is 7, j is 3, and k is 5 \par
\cf2\i\f0\fs32\lang1033 =>prints:\par
i = 5 j = 3 k = 5\f1\lang9\par
\cf0\i0\fs36 (f) i is 7, j is 5, and k is 3\par
\cf2\i\f0\fs32\lang1033 =>prints:\par
i = 7 j = 7 k = 3\f1\lang9\par
\cf0\i0\fs36\par
\cf1 16. \cf0 Consider the following Python program that prints one line of text:\par
val = int(input()) \par
if val < 10: \par
\f0\lang1033     \f1\lang9 if val != 5: \par
\f0\lang1033         \f1\lang9 print("wow ", end='') \par
\f0\lang1033     \f1\lang9 else: \par
\f0\lang1033         \f1\lang9 val += 1 \par
else: \par
\f0\lang1033     \f1\lang9 if val == 17:\par
\f0\lang1033         \f1\lang9  val += 10 \par
\f0\lang1033     \f1\lang9 else: \par
\f0\lang1033         \f1\lang9 print("whoa ", end='') \par
print(val)\par
What will the program print if the user provides the following input?\par
(a) 3\par
\cf2\i\f0\fs32\lang1033 =>wow.\f1\lang9\par
\cf0\i0\fs36 (b) 21\par
\cf2\i\f0\fs32\lang1033 =>whoa.\cf0\i0\f1\fs36\lang9\par
(c) 5 \par
\cf2\i\f0\fs32\lang1033 =>prints nothing, val = 6.\cf0\i0\f1\fs36\lang9\par
(d) 17 \par
\cf2\i\f0\fs32\lang1033 =>prints nothing, val = 27.\cf0\i0\f1\fs36\lang9\par
(e) -5\par
\cf2\i\f0\fs32\lang1033 =>wow.\cf0\i0\f1\fs36\lang9\par
\par
\cf1 17. \cf0 Consider the following two Python programs that appear very similar:\par
\f0\lang1033 A:\par
n = int(input()) \par
if n < 1000: \par
    print('*', end='') \par
if n < 100: \par
    print('*', end='') \par
if n < 10: \par
    print('*', end='') \par
if n < 1: \par
    print('*', end='') \par
print()\par
B:\par
n = int(input()) \par
if n < 1000: \par
    print('*', end='') \par
elif n < 100: \par
    print('*', end='') \par
elif n < 10: \par
    print('*', end='') \par
elif n < 1: \par
    print('*', end='') \par
print()\par
How do the two programs react when the user provides the following inputs? \par
(a) 0\par
\cf2\i\fs32 =>A:****,    B:*\cf0\i0\fs36\par
(b) 1 \par
\cf2\i\fs32 =>A:***,    B:*\cf0\i0\fs36\par
(c) 5\par
\cf2\i\fs32 =>A:***,    B:*\cf0\i0\fs36\par
(d) 50 \par
\cf2\i\fs32 =>A:**,    B:*\cf0\i0\fs36\par
(e) 500 \par
\cf2\i\fs32 =>A:*,    B:*\cf0\i0\fs36\par
(f) 5000 \par
\cf2\i\fs32 =>A:nothing,    B:nothing.\cf0\i0\fs36\par
Why do the two programs behave as they do? \par
\cf2\i\fs32 =>because A checks for each if statement, and if more than one of them is true it will print astrix more than one time.\par
but B has a n<1000 as the first if and the other statements as elif so even tho numbers are small, but as long as they are smaller that 1000 the first if activates and other elifs wont act.\par
\cf0\i0\fs36\par
\cf1 18. \cf0 Write a Python program that requests \f1\u-1279?ve integer values from the user. It then prints the maximum and minimum values entered. If the user enters the values 3, 2, 5, 0, and 1, the program would indicate\f0  \f1 that5\f0  \f1 is the\f0  \f1 maximum\f0  \f1 and 0 is the minimum. Your program should\f0  \f1 handle\f0  \f1 ties properly; for example, if the user enters 2, 4, 2, 3, and 3, the program should report 2 as the minimum and 4 as maximum. \par
\cf2\i\f0\fs32 =>Please note that im infering we have no knowledge of min() and max() existing...\f1\par
max = None;\par
min = None;\par
\par
for i in range(5):\par
    number = int(input('Please enter a number: '));\par
    if i == 0:\par
        max = number;\par
        min = number;\par
    elif(number < min):\par
        min = number;\par
    elif(number > max):\par
        max = number;\par
\par
print("Max is:", max, "\\nMin is:", min);\par
\cf0\i0\fs36\par
\cf1 19.\cf0 Write\f0  \f1 a\f0  \f1 Python\f0  \f1 program\f0  \f1 that\f0  \f1 requests\f0  \f1\u-1279?ve\f0  \f1 integer\f0  \f1 values\f0  \f1 from\f0  \f1 theuser. It\f0  \f1 then\f0  \f1 prints\f0  \f1 one\f0  \f1 of\f0  \f1 two\f0  \f1 things: if\f0  \f1 any\f0  \f1 of\f0  \f1 the\f0  \f1 values\f0  \f1 entered\f0  \f1 are\f0  \f1 duplicates,it\f0  \f1 prints\f0  \f1 "DUPLICATES"\f0  \f1 ;otherwise,it\f2\rtlch\lang1065  \f1\ltrch\lang1033 prints"ALL UNIQUE".\par
\cf2\i\f0\fs32 =>\par
repeat = 0;\par
temp = None;\par
\par
for i in range(5):\par
    number = int(input("Please Enter a integer: "));\par
    if number == temp:\par
        repeat = 1;\par
    else:\par
        temp = number;\par
\par
if repeat:\par
    print("DUPLICATES");\par
else:\par
    print("ALL UNIQUE");\lang9\par
}
 